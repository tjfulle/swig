/* -------------------------------------------------------------------------
 * fortran.swg
 * ------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------
   %fortranbegin : Insertion directive to add wrapper code at the very top of
   the Fortran proxy file.

     Example:
         %fortranbegin %{
         ! Auto-generated by SWIG
         ! Requires foo and bar
         %}

   %proxycode : Insert Fortran code directly into the `contains` portion of a
     module. Note that to make the code accessible you will have to add it to the
     type declartion if appropriate (using `%insert("ftypes")`) or declare it
     as a public module subroutine (using `%insert("fpublic")`).

   %fortranprepend : Add code at the beginning of a proxy function
   %fortranappend  : Add code at the end of a proxy function

   %parameter : Force a global constant to be treated as a compile-time value
           (value MUST be interpretable by Fortran)
   %enumerator : Force an enum to be treated as a compile-time Fortran enum
           (enum values MUST be interpretable by Fortran)
   %bindc : Generate *interfaces only*, no wrapper code, for a function
 */
#define %fortranbegin         %insert("fbegin")
#define %proxycode            %insert("fwrapper")

#define %fortranprepend       %feature("fortran:prepend")
#define %clearfortranprepend  %feature("fortran:prepend","")

#define %fortranappend        %feature("fortran:append")
#define %clearfortranappend   %feature("fortran:append","")


#define %parameter      %feature("fortran:parameter")
#define %noparameter    %feature("fortran:parameter","0")
#define %clearparameter %feature("fortran:parameter","")

#define %enumerator      %feature("fortran:enumerator")
#define %noenumerator    %feature("fortran:enumerator","0")
#define %clearenumerator %feature("fortran:enumerator","")

#define %bindc      %feature("fortran:bindc")
#define %nobindc    %feature("fortran:bindc", "0")
#define %clearbindc %feature("fortran:bindc", "")

/* -------------------------------------------------------------------------
 *
 * ctype      : type in C wrapper code (input parameter, default return value)
 * ctype:out  : *return* type (overrides ctype)
 * ctype:null : null value to return for exceptions, etc. (must be convertible
 *              to type ctype or ctype:out)
 * imtype     : Fortran type returned from "BIND" interface (must be Fortran
 *              equivalent of ctype:out)
 * imtype:in  : Fortran dummy argument type for "BIND" interface (must be
 *              Fortran equivalent of ctype)
 * imtype:import : Import this fortran type into the interface declaration
 * ftype      : Fortran proxy type
 * fin        : Fortran proxy code used to translate a Fortran argument to a
 *              C argument ($input -> $1)
 * fout       : Fortran proxy code to translate return value ($1 -> $result)
 *
 * UNUSUAL TYPEMAPS:
 *
 * findecl    : declare any variables used in converting an input value
 *              ($1_temp)
 * ffreearg   : clean up any variables used to convert an input value
 *              ($1, $result)
 * foutdecl   : declare any temporary variables used to convert output values
 */

/* -------------------------------------------------------------------------
 * \def FORT_COPY_TYPEMAPS
 * \brief Assign our special typemaps to one or more types from an original.
 *
 * This is basically like %apply but doesn't touch anything else SWIG has
 * set up, i.e. globalin
 */
%define FORT_COPY_TYPEMAPS(SRC_TYPE, DST_TYPE...)
  %typemap(ctype)     DST_TYPE = SRC_TYPE;
  %typemap(in)        DST_TYPE = SRC_TYPE;
  %typemap(out)       DST_TYPE = SRC_TYPE;
  %typemap(imtype)    DST_TYPE = SRC_TYPE;
  %typemap(ftype)     DST_TYPE = SRC_TYPE;
  %typemap(fin)       DST_TYPE = SRC_TYPE;
  %typemap(fout)      DST_TYPE = SRC_TYPE;
%enddef

/* FRAGMENT OVERRIDES */
%include "forfragments.swg"

/* RUNTIME AND KEYWORDS */
%include "forruntime.swg"
%include "forkw.swg"

/* TYPEMAPS */
%include "fundamental.swg"
%include "enums.swg"
%include "bindc.swg"
%include "classes.swg"

#ifdef __cplusplus
%include "memfunptr.swg"
#endif


/* vim: set ts=2 sw=2 sts=2 tw=129 : */
